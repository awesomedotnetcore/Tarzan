/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.UI.Server.Models
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Host : TBase
  {
    private string _Address;
    private string _Hostname;
    private int _UpFlows;
    private int _DownFlows;
    private long _OctetsSent;
    private long _OctetsRecv;
    private int _PacketsSent;
    private int _PacketsRecv;

    public string Address
    {
      get
      {
        return _Address;
      }
      set
      {
        __isset.Address = true;
        this._Address = value;
      }
    }

    public string Hostname
    {
      get
      {
        return _Hostname;
      }
      set
      {
        __isset.Hostname = true;
        this._Hostname = value;
      }
    }

    public int UpFlows
    {
      get
      {
        return _UpFlows;
      }
      set
      {
        __isset.UpFlows = true;
        this._UpFlows = value;
      }
    }

    public int DownFlows
    {
      get
      {
        return _DownFlows;
      }
      set
      {
        __isset.DownFlows = true;
        this._DownFlows = value;
      }
    }

    public long OctetsSent
    {
      get
      {
        return _OctetsSent;
      }
      set
      {
        __isset.OctetsSent = true;
        this._OctetsSent = value;
      }
    }

    public long OctetsRecv
    {
      get
      {
        return _OctetsRecv;
      }
      set
      {
        __isset.OctetsRecv = true;
        this._OctetsRecv = value;
      }
    }

    public int PacketsSent
    {
      get
      {
        return _PacketsSent;
      }
      set
      {
        __isset.PacketsSent = true;
        this._PacketsSent = value;
      }
    }

    public int PacketsRecv
    {
      get
      {
        return _PacketsRecv;
      }
      set
      {
        __isset.PacketsRecv = true;
        this._PacketsRecv = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Address;
      public bool Hostname;
      public bool UpFlows;
      public bool DownFlows;
      public bool OctetsSent;
      public bool OctetsRecv;
      public bool PacketsSent;
      public bool PacketsRecv;
    }

    public Host() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Address = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Hostname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                UpFlows = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                DownFlows = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                OctetsSent = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                OctetsRecv = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                PacketsSent = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                PacketsRecv = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Host");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Address != null && __isset.Address) {
          field.Name = "Address";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Address);
          oprot.WriteFieldEnd();
        }
        if (Hostname != null && __isset.Hostname) {
          field.Name = "Hostname";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Hostname);
          oprot.WriteFieldEnd();
        }
        if (__isset.UpFlows) {
          field.Name = "UpFlows";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpFlows);
          oprot.WriteFieldEnd();
        }
        if (__isset.DownFlows) {
          field.Name = "DownFlows";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DownFlows);
          oprot.WriteFieldEnd();
        }
        if (__isset.OctetsSent) {
          field.Name = "OctetsSent";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OctetsSent);
          oprot.WriteFieldEnd();
        }
        if (__isset.OctetsRecv) {
          field.Name = "OctetsRecv";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OctetsRecv);
          oprot.WriteFieldEnd();
        }
        if (__isset.PacketsSent) {
          field.Name = "PacketsSent";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PacketsSent);
          oprot.WriteFieldEnd();
        }
        if (__isset.PacketsRecv) {
          field.Name = "PacketsRecv";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PacketsRecv);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Host(");
      bool __first = true;
      if (Address != null && __isset.Address) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Address: ");
        __sb.Append(Address);
      }
      if (Hostname != null && __isset.Hostname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hostname: ");
        __sb.Append(Hostname);
      }
      if (__isset.UpFlows) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpFlows: ");
        __sb.Append(UpFlows);
      }
      if (__isset.DownFlows) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DownFlows: ");
        __sb.Append(DownFlows);
      }
      if (__isset.OctetsSent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OctetsSent: ");
        __sb.Append(OctetsSent);
      }
      if (__isset.OctetsRecv) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OctetsRecv: ");
        __sb.Append(OctetsRecv);
      }
      if (__isset.PacketsSent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PacketsSent: ");
        __sb.Append(PacketsSent);
      }
      if (__isset.PacketsRecv) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PacketsRecv: ");
        __sb.Append(PacketsRecv);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
