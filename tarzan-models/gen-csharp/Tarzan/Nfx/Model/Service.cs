/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.Nfx.Model
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Service : TBase
  {
    private string _Name;
    private int _Flows;
    private int _Packets;
    private int _MinPackets;
    private int _MaxPackets;
    private long _Octets;
    private long _MinOctets;
    private long _MaxOctets;
    private long _MinDuration;
    private long _MaxDuration;
    private long _AvgDuration;

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public int Flows
    {
      get
      {
        return _Flows;
      }
      set
      {
        __isset.Flows = true;
        this._Flows = value;
      }
    }

    public int Packets
    {
      get
      {
        return _Packets;
      }
      set
      {
        __isset.Packets = true;
        this._Packets = value;
      }
    }

    public int MinPackets
    {
      get
      {
        return _MinPackets;
      }
      set
      {
        __isset.MinPackets = true;
        this._MinPackets = value;
      }
    }

    public int MaxPackets
    {
      get
      {
        return _MaxPackets;
      }
      set
      {
        __isset.MaxPackets = true;
        this._MaxPackets = value;
      }
    }

    public long Octets
    {
      get
      {
        return _Octets;
      }
      set
      {
        __isset.Octets = true;
        this._Octets = value;
      }
    }

    public long MinOctets
    {
      get
      {
        return _MinOctets;
      }
      set
      {
        __isset.MinOctets = true;
        this._MinOctets = value;
      }
    }

    public long MaxOctets
    {
      get
      {
        return _MaxOctets;
      }
      set
      {
        __isset.MaxOctets = true;
        this._MaxOctets = value;
      }
    }

    public long MinDuration
    {
      get
      {
        return _MinDuration;
      }
      set
      {
        __isset.MinDuration = true;
        this._MinDuration = value;
      }
    }

    public long MaxDuration
    {
      get
      {
        return _MaxDuration;
      }
      set
      {
        __isset.MaxDuration = true;
        this._MaxDuration = value;
      }
    }

    public long AvgDuration
    {
      get
      {
        return _AvgDuration;
      }
      set
      {
        __isset.AvgDuration = true;
        this._AvgDuration = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Name;
      public bool Flows;
      public bool Packets;
      public bool MinPackets;
      public bool MaxPackets;
      public bool Octets;
      public bool MinOctets;
      public bool MaxOctets;
      public bool MinDuration;
      public bool MaxDuration;
      public bool AvgDuration;
    }

    public Service() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Flows = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Packets = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MinPackets = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                MaxPackets = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                Octets = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                MinOctets = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                MaxOctets = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                MinDuration = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                MaxDuration = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                AvgDuration = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Service");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.Flows) {
          field.Name = "Flows";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Flows);
          oprot.WriteFieldEnd();
        }
        if (__isset.Packets) {
          field.Name = "Packets";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Packets);
          oprot.WriteFieldEnd();
        }
        if (__isset.MinPackets) {
          field.Name = "MinPackets";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MinPackets);
          oprot.WriteFieldEnd();
        }
        if (__isset.MaxPackets) {
          field.Name = "MaxPackets";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxPackets);
          oprot.WriteFieldEnd();
        }
        if (__isset.Octets) {
          field.Name = "Octets";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Octets);
          oprot.WriteFieldEnd();
        }
        if (__isset.MinOctets) {
          field.Name = "MinOctets";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MinOctets);
          oprot.WriteFieldEnd();
        }
        if (__isset.MaxOctets) {
          field.Name = "MaxOctets";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MaxOctets);
          oprot.WriteFieldEnd();
        }
        if (__isset.MinDuration) {
          field.Name = "MinDuration";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MinDuration);
          oprot.WriteFieldEnd();
        }
        if (__isset.MaxDuration) {
          field.Name = "MaxDuration";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MaxDuration);
          oprot.WriteFieldEnd();
        }
        if (__isset.AvgDuration) {
          field.Name = "AvgDuration";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AvgDuration);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Service(");
      bool __first = true;
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.Flows) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flows: ");
        __sb.Append(Flows);
      }
      if (__isset.Packets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Packets: ");
        __sb.Append(Packets);
      }
      if (__isset.MinPackets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinPackets: ");
        __sb.Append(MinPackets);
      }
      if (__isset.MaxPackets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxPackets: ");
        __sb.Append(MaxPackets);
      }
      if (__isset.Octets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Octets: ");
        __sb.Append(Octets);
      }
      if (__isset.MinOctets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinOctets: ");
        __sb.Append(MinOctets);
      }
      if (__isset.MaxOctets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxOctets: ");
        __sb.Append(MaxOctets);
      }
      if (__isset.MinDuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MinDuration: ");
        __sb.Append(MinDuration);
      }
      if (__isset.MaxDuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxDuration: ");
        __sb.Append(MaxDuration);
      }
      if (__isset.AvgDuration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AvgDuration: ");
        __sb.Append(AvgDuration);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
