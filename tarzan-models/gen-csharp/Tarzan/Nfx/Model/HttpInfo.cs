/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.Nfx.Model
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HttpInfo : TBase
  {
    private string _FlowId;
    private string _Rid;
    private string _Method;
    private string _Host;
    private string _Uri;
    private string _Referrer;
    private string _Version;
    private string _UserAgent;
    private int _RequestBodyLenght;
    private int _ResponseBodyLength;
    private string _StatusCode;
    private string _StatusMessage;
    private string _InfoCode;
    private string _InfoMessage;
    private string _Username;
    private string _Password;
    private List<string> _Headers;

    public string FlowId
    {
      get
      {
        return _FlowId;
      }
      set
      {
        __isset.FlowId = true;
        this._FlowId = value;
      }
    }

    public string Rid
    {
      get
      {
        return _Rid;
      }
      set
      {
        __isset.Rid = true;
        this._Rid = value;
      }
    }

    public string Method
    {
      get
      {
        return _Method;
      }
      set
      {
        __isset.Method = true;
        this._Method = value;
      }
    }

    public string Host
    {
      get
      {
        return _Host;
      }
      set
      {
        __isset.Host = true;
        this._Host = value;
      }
    }

    public string Uri
    {
      get
      {
        return _Uri;
      }
      set
      {
        __isset.Uri = true;
        this._Uri = value;
      }
    }

    public string Referrer
    {
      get
      {
        return _Referrer;
      }
      set
      {
        __isset.Referrer = true;
        this._Referrer = value;
      }
    }

    public string Version
    {
      get
      {
        return _Version;
      }
      set
      {
        __isset.Version = true;
        this._Version = value;
      }
    }

    public string UserAgent
    {
      get
      {
        return _UserAgent;
      }
      set
      {
        __isset.UserAgent = true;
        this._UserAgent = value;
      }
    }

    public int RequestBodyLenght
    {
      get
      {
        return _RequestBodyLenght;
      }
      set
      {
        __isset.RequestBodyLenght = true;
        this._RequestBodyLenght = value;
      }
    }

    public int ResponseBodyLength
    {
      get
      {
        return _ResponseBodyLength;
      }
      set
      {
        __isset.ResponseBodyLength = true;
        this._ResponseBodyLength = value;
      }
    }

    public string StatusCode
    {
      get
      {
        return _StatusCode;
      }
      set
      {
        __isset.StatusCode = true;
        this._StatusCode = value;
      }
    }

    public string StatusMessage
    {
      get
      {
        return _StatusMessage;
      }
      set
      {
        __isset.StatusMessage = true;
        this._StatusMessage = value;
      }
    }

    public string InfoCode
    {
      get
      {
        return _InfoCode;
      }
      set
      {
        __isset.InfoCode = true;
        this._InfoCode = value;
      }
    }

    public string InfoMessage
    {
      get
      {
        return _InfoMessage;
      }
      set
      {
        __isset.InfoMessage = true;
        this._InfoMessage = value;
      }
    }

    public string Username
    {
      get
      {
        return _Username;
      }
      set
      {
        __isset.Username = true;
        this._Username = value;
      }
    }

    public string Password
    {
      get
      {
        return _Password;
      }
      set
      {
        __isset.Password = true;
        this._Password = value;
      }
    }

    public List<string> Headers
    {
      get
      {
        return _Headers;
      }
      set
      {
        __isset.Headers = true;
        this._Headers = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FlowId;
      public bool Rid;
      public bool Method;
      public bool Host;
      public bool Uri;
      public bool Referrer;
      public bool Version;
      public bool UserAgent;
      public bool RequestBodyLenght;
      public bool ResponseBodyLength;
      public bool StatusCode;
      public bool StatusMessage;
      public bool InfoCode;
      public bool InfoMessage;
      public bool Username;
      public bool Password;
      public bool Headers;
    }

    public HttpInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FlowId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Rid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Method = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Host = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Uri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Referrer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Version = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                UserAgent = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                RequestBodyLenght = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                ResponseBodyLength = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                StatusCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                StatusMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                InfoCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                InfoMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.List) {
                {
                  Headers = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    Headers.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HttpInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FlowId != null && __isset.FlowId) {
          field.Name = "FlowId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlowId);
          oprot.WriteFieldEnd();
        }
        if (Rid != null && __isset.Rid) {
          field.Name = "Rid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Rid);
          oprot.WriteFieldEnd();
        }
        if (Method != null && __isset.Method) {
          field.Name = "Method";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Method);
          oprot.WriteFieldEnd();
        }
        if (Host != null && __isset.Host) {
          field.Name = "Host";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Host);
          oprot.WriteFieldEnd();
        }
        if (Uri != null && __isset.Uri) {
          field.Name = "Uri";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uri);
          oprot.WriteFieldEnd();
        }
        if (Referrer != null && __isset.Referrer) {
          field.Name = "Referrer";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Referrer);
          oprot.WriteFieldEnd();
        }
        if (Version != null && __isset.Version) {
          field.Name = "Version";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Version);
          oprot.WriteFieldEnd();
        }
        if (UserAgent != null && __isset.UserAgent) {
          field.Name = "UserAgent";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserAgent);
          oprot.WriteFieldEnd();
        }
        if (__isset.RequestBodyLenght) {
          field.Name = "RequestBodyLenght";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RequestBodyLenght);
          oprot.WriteFieldEnd();
        }
        if (__isset.ResponseBodyLength) {
          field.Name = "ResponseBodyLength";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ResponseBodyLength);
          oprot.WriteFieldEnd();
        }
        if (StatusCode != null && __isset.StatusCode) {
          field.Name = "StatusCode";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StatusCode);
          oprot.WriteFieldEnd();
        }
        if (StatusMessage != null && __isset.StatusMessage) {
          field.Name = "StatusMessage";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StatusMessage);
          oprot.WriteFieldEnd();
        }
        if (InfoCode != null && __isset.InfoCode) {
          field.Name = "InfoCode";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InfoCode);
          oprot.WriteFieldEnd();
        }
        if (InfoMessage != null && __isset.InfoMessage) {
          field.Name = "InfoMessage";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InfoMessage);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.Username) {
          field.Name = "Username";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.Password) {
          field.Name = "Password";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (Headers != null && __isset.Headers) {
          field.Name = "Headers";
          field.Type = TType.List;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Headers.Count));
            foreach (string _iter3 in Headers)
            {
              oprot.WriteString(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HttpInfo(");
      bool __first = true;
      if (FlowId != null && __isset.FlowId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FlowId: ");
        __sb.Append(FlowId);
      }
      if (Rid != null && __isset.Rid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rid: ");
        __sb.Append(Rid);
      }
      if (Method != null && __isset.Method) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Method: ");
        __sb.Append(Method);
      }
      if (Host != null && __isset.Host) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Host: ");
        __sb.Append(Host);
      }
      if (Uri != null && __isset.Uri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uri: ");
        __sb.Append(Uri);
      }
      if (Referrer != null && __isset.Referrer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Referrer: ");
        __sb.Append(Referrer);
      }
      if (Version != null && __isset.Version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (UserAgent != null && __isset.UserAgent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserAgent: ");
        __sb.Append(UserAgent);
      }
      if (__isset.RequestBodyLenght) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestBodyLenght: ");
        __sb.Append(RequestBodyLenght);
      }
      if (__isset.ResponseBodyLength) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResponseBodyLength: ");
        __sb.Append(ResponseBodyLength);
      }
      if (StatusCode != null && __isset.StatusCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusCode: ");
        __sb.Append(StatusCode);
      }
      if (StatusMessage != null && __isset.StatusMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusMessage: ");
        __sb.Append(StatusMessage);
      }
      if (InfoCode != null && __isset.InfoCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InfoCode: ");
        __sb.Append(InfoCode);
      }
      if (InfoMessage != null && __isset.InfoMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InfoMessage: ");
        __sb.Append(InfoMessage);
      }
      if (Username != null && __isset.Username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (Password != null && __isset.Password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (Headers != null && __isset.Headers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Headers: ");
        __sb.Append(Headers);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
