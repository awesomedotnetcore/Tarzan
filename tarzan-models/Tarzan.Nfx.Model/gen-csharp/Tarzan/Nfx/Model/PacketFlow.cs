/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.Nfx.Model
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PacketFlow : TBase
  {
    private string _FlowUid;
    private string _Protocol;
    private string _SourceAddress;
    private int _SourcePort;
    private string _DestinationAddress;
    private int _DestinationPort;
    private long _FirstSeen;
    private long _LastSeen;
    private int _Packets;
    private long _Octets;
    private string _ServiceName;

    public string FlowUid
    {
      get
      {
        return _FlowUid;
      }
      set
      {
        __isset.FlowUid = true;
        this._FlowUid = value;
      }
    }

    public string Protocol
    {
      get
      {
        return _Protocol;
      }
      set
      {
        __isset.Protocol = true;
        this._Protocol = value;
      }
    }

    public string SourceAddress
    {
      get
      {
        return _SourceAddress;
      }
      set
      {
        __isset.SourceAddress = true;
        this._SourceAddress = value;
      }
    }

    public int SourcePort
    {
      get
      {
        return _SourcePort;
      }
      set
      {
        __isset.SourcePort = true;
        this._SourcePort = value;
      }
    }

    public string DestinationAddress
    {
      get
      {
        return _DestinationAddress;
      }
      set
      {
        __isset.DestinationAddress = true;
        this._DestinationAddress = value;
      }
    }

    public int DestinationPort
    {
      get
      {
        return _DestinationPort;
      }
      set
      {
        __isset.DestinationPort = true;
        this._DestinationPort = value;
      }
    }

    public long FirstSeen
    {
      get
      {
        return _FirstSeen;
      }
      set
      {
        __isset.FirstSeen = true;
        this._FirstSeen = value;
      }
    }

    public long LastSeen
    {
      get
      {
        return _LastSeen;
      }
      set
      {
        __isset.LastSeen = true;
        this._LastSeen = value;
      }
    }

    public int Packets
    {
      get
      {
        return _Packets;
      }
      set
      {
        __isset.Packets = true;
        this._Packets = value;
      }
    }

    public long Octets
    {
      get
      {
        return _Octets;
      }
      set
      {
        __isset.Octets = true;
        this._Octets = value;
      }
    }

    public string ServiceName
    {
      get
      {
        return _ServiceName;
      }
      set
      {
        __isset.ServiceName = true;
        this._ServiceName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FlowUid;
      public bool Protocol;
      public bool SourceAddress;
      public bool SourcePort;
      public bool DestinationAddress;
      public bool DestinationPort;
      public bool FirstSeen;
      public bool LastSeen;
      public bool Packets;
      public bool Octets;
      public bool ServiceName;
    }

    public PacketFlow() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FlowUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Protocol = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SourceAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                SourcePort = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                DestinationAddress = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                DestinationPort = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                FirstSeen = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                LastSeen = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                Packets = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                Octets = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                ServiceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PacketFlow");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FlowUid != null && __isset.FlowUid) {
          field.Name = "FlowUid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlowUid);
          oprot.WriteFieldEnd();
        }
        if (Protocol != null && __isset.Protocol) {
          field.Name = "Protocol";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Protocol);
          oprot.WriteFieldEnd();
        }
        if (SourceAddress != null && __isset.SourceAddress) {
          field.Name = "SourceAddress";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceAddress);
          oprot.WriteFieldEnd();
        }
        if (__isset.SourcePort) {
          field.Name = "SourcePort";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SourcePort);
          oprot.WriteFieldEnd();
        }
        if (DestinationAddress != null && __isset.DestinationAddress) {
          field.Name = "DestinationAddress";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DestinationAddress);
          oprot.WriteFieldEnd();
        }
        if (__isset.DestinationPort) {
          field.Name = "DestinationPort";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DestinationPort);
          oprot.WriteFieldEnd();
        }
        if (__isset.FirstSeen) {
          field.Name = "FirstSeen";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FirstSeen);
          oprot.WriteFieldEnd();
        }
        if (__isset.LastSeen) {
          field.Name = "LastSeen";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSeen);
          oprot.WriteFieldEnd();
        }
        if (__isset.Packets) {
          field.Name = "Packets";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Packets);
          oprot.WriteFieldEnd();
        }
        if (__isset.Octets) {
          field.Name = "Octets";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Octets);
          oprot.WriteFieldEnd();
        }
        if (ServiceName != null && __isset.ServiceName) {
          field.Name = "ServiceName";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ServiceName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PacketFlow(");
      bool __first = true;
      if (FlowUid != null && __isset.FlowUid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FlowUid: ");
        __sb.Append(FlowUid);
      }
      if (Protocol != null && __isset.Protocol) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Protocol: ");
        __sb.Append(Protocol);
      }
      if (SourceAddress != null && __isset.SourceAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceAddress: ");
        __sb.Append(SourceAddress);
      }
      if (__isset.SourcePort) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourcePort: ");
        __sb.Append(SourcePort);
      }
      if (DestinationAddress != null && __isset.DestinationAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DestinationAddress: ");
        __sb.Append(DestinationAddress);
      }
      if (__isset.DestinationPort) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DestinationPort: ");
        __sb.Append(DestinationPort);
      }
      if (__isset.FirstSeen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FirstSeen: ");
        __sb.Append(FirstSeen);
      }
      if (__isset.LastSeen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSeen: ");
        __sb.Append(LastSeen);
      }
      if (__isset.Packets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Packets: ");
        __sb.Append(Packets);
      }
      if (__isset.Octets) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Octets: ");
        __sb.Append(Octets);
      }
      if (ServiceName != null && __isset.ServiceName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceName: ");
        __sb.Append(ServiceName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
