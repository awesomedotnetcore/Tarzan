/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.Nfx.Model
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DnsObject : TBase
  {
    private string _FlowUid;
    private string _TransactionId;
    private long _Timestamp;
    private string _Client;
    private string _Server;
    private int _DnsTtl;
    private string _DnsType;
    private string _DnsQuery;
    private string _DnsAnswer;

    public string FlowUid
    {
      get
      {
        return _FlowUid;
      }
      set
      {
        __isset.FlowUid = true;
        this._FlowUid = value;
      }
    }

    public string TransactionId
    {
      get
      {
        return _TransactionId;
      }
      set
      {
        __isset.TransactionId = true;
        this._TransactionId = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _Timestamp;
      }
      set
      {
        __isset.Timestamp = true;
        this._Timestamp = value;
      }
    }

    public string Client
    {
      get
      {
        return _Client;
      }
      set
      {
        __isset.Client = true;
        this._Client = value;
      }
    }

    public string Server
    {
      get
      {
        return _Server;
      }
      set
      {
        __isset.Server = true;
        this._Server = value;
      }
    }

    public int DnsTtl
    {
      get
      {
        return _DnsTtl;
      }
      set
      {
        __isset.DnsTtl = true;
        this._DnsTtl = value;
      }
    }

    public string DnsType
    {
      get
      {
        return _DnsType;
      }
      set
      {
        __isset.DnsType = true;
        this._DnsType = value;
      }
    }

    public string DnsQuery
    {
      get
      {
        return _DnsQuery;
      }
      set
      {
        __isset.DnsQuery = true;
        this._DnsQuery = value;
      }
    }

    public string DnsAnswer
    {
      get
      {
        return _DnsAnswer;
      }
      set
      {
        __isset.DnsAnswer = true;
        this._DnsAnswer = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool FlowUid;
      public bool TransactionId;
      public bool Timestamp;
      public bool Client;
      public bool Server;
      public bool DnsTtl;
      public bool DnsType;
      public bool DnsQuery;
      public bool DnsAnswer;
    }

    public DnsObject() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                FlowUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TransactionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Client = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Server = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                DnsTtl = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                DnsType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                DnsQuery = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                DnsAnswer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DnsObject");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FlowUid != null && __isset.FlowUid) {
          field.Name = "FlowUid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FlowUid);
          oprot.WriteFieldEnd();
        }
        if (TransactionId != null && __isset.TransactionId) {
          field.Name = "TransactionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TransactionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.Timestamp) {
          field.Name = "Timestamp";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Timestamp);
          oprot.WriteFieldEnd();
        }
        if (Client != null && __isset.Client) {
          field.Name = "Client";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Client);
          oprot.WriteFieldEnd();
        }
        if (Server != null && __isset.Server) {
          field.Name = "Server";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Server);
          oprot.WriteFieldEnd();
        }
        if (__isset.DnsTtl) {
          field.Name = "DnsTtl";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(DnsTtl);
          oprot.WriteFieldEnd();
        }
        if (DnsType != null && __isset.DnsType) {
          field.Name = "DnsType";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DnsType);
          oprot.WriteFieldEnd();
        }
        if (DnsQuery != null && __isset.DnsQuery) {
          field.Name = "DnsQuery";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DnsQuery);
          oprot.WriteFieldEnd();
        }
        if (DnsAnswer != null && __isset.DnsAnswer) {
          field.Name = "DnsAnswer";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DnsAnswer);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DnsObject(");
      bool __first = true;
      if (FlowUid != null && __isset.FlowUid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FlowUid: ");
        __sb.Append(FlowUid);
      }
      if (TransactionId != null && __isset.TransactionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransactionId: ");
        __sb.Append(TransactionId);
      }
      if (__isset.Timestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      if (Client != null && __isset.Client) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Client: ");
        __sb.Append(Client);
      }
      if (Server != null && __isset.Server) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Server: ");
        __sb.Append(Server);
      }
      if (__isset.DnsTtl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DnsTtl: ");
        __sb.Append(DnsTtl);
      }
      if (DnsType != null && __isset.DnsType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DnsType: ");
        __sb.Append(DnsType);
      }
      if (DnsQuery != null && __isset.DnsQuery) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DnsQuery: ");
        __sb.Append(DnsQuery);
      }
      if (DnsAnswer != null && __isset.DnsAnswer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DnsAnswer: ");
        __sb.Append(DnsAnswer);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
