/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Tarzan.Nfx.Model
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HttpInfoFilter : TBase
  {
    private string _Uri;
    private List<string> _ContentTypeList;
    private string _AtLeastSize;
    private string _AtMostSize;
    private string _TimeRange;

    public string Uri
    {
      get
      {
        return _Uri;
      }
      set
      {
        __isset.Uri = true;
        this._Uri = value;
      }
    }

    public List<string> ContentTypeList
    {
      get
      {
        return _ContentTypeList;
      }
      set
      {
        __isset.ContentTypeList = true;
        this._ContentTypeList = value;
      }
    }

    public string AtLeastSize
    {
      get
      {
        return _AtLeastSize;
      }
      set
      {
        __isset.AtLeastSize = true;
        this._AtLeastSize = value;
      }
    }

    public string AtMostSize
    {
      get
      {
        return _AtMostSize;
      }
      set
      {
        __isset.AtMostSize = true;
        this._AtMostSize = value;
      }
    }

    public string TimeRange
    {
      get
      {
        return _TimeRange;
      }
      set
      {
        __isset.TimeRange = true;
        this._TimeRange = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Uri;
      public bool ContentTypeList;
      public bool AtLeastSize;
      public bool AtMostSize;
      public bool TimeRange;
    }

    public HttpInfoFilter() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ContentTypeList = new List<string>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = iprot.ReadString();
                    ContentTypeList.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                AtLeastSize = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AtMostSize = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                TimeRange = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("HttpInfoFilter");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uri != null && __isset.Uri) {
          field.Name = "Uri";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uri);
          oprot.WriteFieldEnd();
        }
        if (ContentTypeList != null && __isset.ContentTypeList) {
          field.Name = "ContentTypeList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContentTypeList.Count));
            foreach (string _iter19 in ContentTypeList)
            {
              oprot.WriteString(_iter19);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AtLeastSize != null && __isset.AtLeastSize) {
          field.Name = "AtLeastSize";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AtLeastSize);
          oprot.WriteFieldEnd();
        }
        if (AtMostSize != null && __isset.AtMostSize) {
          field.Name = "AtMostSize";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AtMostSize);
          oprot.WriteFieldEnd();
        }
        if (TimeRange != null && __isset.TimeRange) {
          field.Name = "TimeRange";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TimeRange);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("HttpInfoFilter(");
      bool __first = true;
      if (Uri != null && __isset.Uri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uri: ");
        __sb.Append(Uri);
      }
      if (ContentTypeList != null && __isset.ContentTypeList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContentTypeList: ");
        __sb.Append(ContentTypeList);
      }
      if (AtLeastSize != null && __isset.AtLeastSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtLeastSize: ");
        __sb.Append(AtLeastSize);
      }
      if (AtMostSize != null && __isset.AtMostSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtMostSize: ");
        __sb.Append(AtMostSize);
      }
      if (TimeRange != null && __isset.TimeRange) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeRange: ");
        __sb.Append(TimeRange);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
